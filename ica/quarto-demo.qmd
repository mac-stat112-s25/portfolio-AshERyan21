---
title: "My first Quarto document"
format:
  html:
    toc: true
    toc-depth: 1
    embed-resources: true
---

# Intro


**Macalester College** is in the *Twin Cities*.
It has:

- four seasons
- bagpipes
- delightful students

Check it out for yourself:

![](https://www.macalester.edu/about/wp-content/uploads/sites/191/2019/12/campusmap336.png)



\
\




# Exercise 1: Deduce Quarto features

Check out the appearance and contents of this document. Thoughts?

In the toolbar at the top of this document, **Render** the .qmd file into a .html file. Where is this file stored? Thoughts about its appearance / contents? Can you edit it?

I cannot edit the html file, however, I can edit the .qmd file in RStudio. Once I render a version that is the version that becomes the html, it does not update live. The html file appears to open and be stored in an internet browser?

Toggling between the .qmd and .html files, explain the purpose of the following features in the .qmd file:        

`*`
This is an asterisk.

`**`
This is a double asterisk.

`#`
This is the pound key.

`-`
This is a hyphen.

`\`
This is a backslash.

`![](url)`
I would think that this might be a way to include a URL, or reference something. 





\
\
\




# Exercise 2: Code


How does this appear in the .qmd? The .html? So...?!

seq(from = 100, to = 1000, by = 50)

As it is this does nothing, however, I would suspect that if this was in a code chunk it might be different. It did not automatically open or perform any functions in the .html either. 








\
\
\



# Exercise 3: Chunks

Quarto isn't a mind reader -- we must distinguish R code from text.
We do so by putting code inside an **R chunk**:

```{r}
seq(from = 100, to = 1000, by = 50)
```

- Put the `seq()` code in the chunk.
- Press the green arrow in the top right of the chunk. What happens in the qmd?
In the .qmd this runs the sequence and prints the output.

- Render. What appears in the html: R code, output, or both?
It printed the sequence in the console, as well as rendered the code and the sequence output.





\
\
\




# Exercise 4: Practice

- Use R code to create the following sequence: 10 10 10 10
- Store the sequence as `four_tens`.
- Use an R function (which we haven't learned!) to add up the numbers in `four_tens`.
I used the sum function!

```{r}
four_tens <- rep(10,4)
sum(four_tens)
```


\
\
\




# Exercise 5: Fix this code

Code is a form of communication, and the code below doesn't cut it.

Put the code in a chunk and fix it.
```{r}
rep(x = 1, times = 10)
seq(from = 100, to = 1000, length = 20)
total_Students_Section02 <- 27

```
For the first line of code I changed Rep to rep. For the second line I changed the spacing, and for the third I changed the name and included underscores.

\
\
\


# Exercise 6: Comments

Run the chunk below.
Notice that R ignores anything in a line starting with a pound sign (`#`).
If we took the `#` away we'd get an error!

```{r}
# This is a comment
4 + 5
```

We'll utilize this feature to **comment our code**, i.e. leave short notes about what our code is doing.
Below, replace the `???` with an appropriate comment.

```{r}
# This calculates temperature from Celsius to Farenheight.

temperature_c <- 10
temperature_f <- temperature_c * 9/5 + 32
temperature_f
```
